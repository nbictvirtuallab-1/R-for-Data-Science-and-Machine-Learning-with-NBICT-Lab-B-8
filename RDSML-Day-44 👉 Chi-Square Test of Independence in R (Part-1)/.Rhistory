data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(all_summary)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
setwd("~/")
PlantGrowth = PlantGrowth
View(PlantGrowth)
library(dplyr)
stats = PlantGrowth %>%
group_by(group) %>%
summarise(
mean = mean(weight),
sd = sd(weight),
se = sd(weight)/ sqrt(n())
)
print(stats)
boxplot(weight ~ group,
data = PlantGrowth,
main = "PlantGrowth data",
ylab = "Dried weight of plants",
col = "lightgray"
)
library(ggpubr)
ggline(PlantGrowth,
x= "group",
y = "weight",
add = c("mean_se" , "jitter")
)
anova = aov(weight ~ group, data = PlantGrowth)
print(anova)
summary(anova)
shapiro.test(aov_res)
plot(anova,2)
aov_res = residuals(object = anova)
shapiro.test(aov_res)
kruskal.test(weight~group , data = PlantGrowth)
pairwise.wilcox.test(PlantGrowth$weight,PlantGrowth$group,
p.adjust.method = "BH")
# Loading the dataset
myData = ToothGrowth
View(myData)
View(myData)
# Converting the variable dose from a numeric to a factor variable
myData$dose = as.factor(myData$dose)
# Basic boxplot
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
library(ggplot2)
ggplot(myData, aes(x = dose, y = len))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot() +
coord_flip()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() +
scale_x_discrete(limit = c("2", "0.5", "1"))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(1))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_stack(1))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(2))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(6))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.5))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(1))
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
install.packages("virdislite")
library(viridisLite)
df = mtcars
View(df)
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl))
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
p = ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = .5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "left",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
df$cyl = as.factor(df$cyl)
df$cyl = as.factor(df$cyl)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
library(ggplot2)
install.packages("ggthemes")
install.packages("ggthemes")
library(ggthemes)
library(viridisLite)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "left",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "center",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-43👉 Two-way ANOVA in R (Part-5)")
install.packages(c(
"tidyverse","car","emmeans","effectsize","performance",
"broom","broom.helpers","kableExtra","multcomp","multcompView","patchwork"
))
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
options(contrasts = c("contr.sum","contr.poly"))
theme_set(theme_classic(base_size = 12))
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
View(d)
View(d)
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
cat("\nCell counts (balance check):\n")
print(with(d, table(fert, irr)))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
View(summs)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
m <- aov(y ~ fert * irr, data = d)
summary(m)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
kbl(aov_tab, digits = 3, caption = "Two-way ANOVA") %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman")
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
res <- residuals(m)
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))
print(performance::check_model(m))
emm_int <- emmeans(m, ~ fert * irr)
fert_within_irr <- contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
cat("\nPairwise fert within each irr:\n"); print(fert_within_irr)
irr_within_fert <- contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
cat("\nPairwise irr within each fert:\n"); print(irr_within_fert)
emm_fert <- emmeans(m, ~ fert)
emm_irr  <- emmeans(m, ~ irr)
cat("\nMain effects (fert):\n"); print(contrast(emm_fert, "tukey"))
cat("\nMain effects (irr):\n");  print(contrast(emm_irr,  "tukey"))
cld_letters <- multcomp::cld(emm_int, Letters = letters, adjust = "tukey")
print(cld_letters)
emm_df <- as.data.frame(cld_letters)
p_emm <- ggplot(emm_df, aes(irr, emmean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=lower.CL, ymax=upper.CL),
width=.15, position=position_dodge(width=.3)) +
geom_text(aes(label=.group), vjust=-1.1, position=position_dodge(width=.3), show.legend = FALSE) +
labs(title="EMMs ± 95% CI with CLD letters", x="Irrigation", y="Estimated marginal mean")
print(p_emm)
library(effectsize)
# From the model table (Type III to match tests above)
eta_squared(m, partial = FALSE, alternative="two.sided")
eta_squared(m, partial = TRUE)
omega_squared(m)
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-44 👉 Chi-Square Test of Independence in R (Part-1)")
housetasks <- read.delim("housetasks.txt")
housetasks <- read.delim("housetasks.txt")
View(housetasks)
housetasks <- read.delim("housetasks.txt", row.names = 1)
View(housetasks)
housetasks <- read.delim("housetasks.txt", row.names = 1)
housetasks <- read.delim("housetasks.txt", row.names = 1)
View(housetasks)
View(housetasks)
housetasks <- read.delim("housetasks.txt")
housetasks <- read.delim("housetasks.txt")
View(housetasks)
housetasks <- read.delim("housetasks.txt" , row.names = 1)
View(housetasks)
housetasks <- read.delim("housetasks.txt" , row.names = 2)
housetasks <- read.delim("housetasks.txt" , row.names = 1)
View(housetasks)
install.packages("gplots")
library(gplots)
as.matrix(housetasks)
dt <- as.table(as.matrix(housetasks))
dt
balloonplot(t(dt))
balloonplot(t(dt), main = "Housetasks")
balloonplot(t(dt), main = "Housetasks Visualization")
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = FALSE)
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = FALSE , show.margins = FALSE)
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = FALSE , show.margins = F)
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = F , show.margins = F)
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = F , show.margins = F , xlab = "")
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = F , show.margins = F , xlab = "",
ylab = "")
balloonplot(t(dt), main = "Housetasks Visualization" ,
label = F , show.margins = F ,
xlab = "" , ylab = "")
library(graphics)
mosaicplot(dt)
mosaicplot(dt , shade = T)
# Plotting using mosaicplot
# las for axis label style
mosaicplot(dt , shade = T , las = 2 )
# Plotting using mosaicplot
# las for axis label style
mosaicplot(dt , shade = T , las = 3 )
# Plotting using mosaicplot
# las for axis label style
mosaicplot(dt , shade = T , las = 1 )
# Plotting using mosaicplot
# las for axis label style
mosaicplot(dt , shade = T , las = 12 )
# Plotting using mosaicplot
# las for axis label style
mosaicplot(dt , shade = T , las = 2 )
# Plotting using mosaicplot
# las for axis label style
mosaicplot(dt , shade = T , las = 2 ,
main = "Housetasks")
chisq <- chisq.test(housetasks)
chisq
# Observed counts
chisq$observed
chisq$expected
round(chisq$expected , 2)
round(chisq$expected , 6)
round(chisq$expected , 2)
