d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
tooth_data = ToothGrowth
# Creating a function for summarizing the data
# based on the grouping variables
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(all_summary)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
setwd("~/")
PlantGrowth = PlantGrowth
View(PlantGrowth)
library(dplyr)
stats = PlantGrowth %>%
group_by(group) %>%
summarise(
mean = mean(weight),
sd = sd(weight),
se = sd(weight)/ sqrt(n())
)
print(stats)
boxplot(weight ~ group,
data = PlantGrowth,
main = "PlantGrowth data",
ylab = "Dried weight of plants",
col = "lightgray"
)
library(ggpubr)
ggline(PlantGrowth,
x= "group",
y = "weight",
add = c("mean_se" , "jitter")
)
anova = aov(weight ~ group, data = PlantGrowth)
print(anova)
summary(anova)
shapiro.test(aov_res)
plot(anova,2)
aov_res = residuals(object = anova)
shapiro.test(aov_res)
kruskal.test(weight~group , data = PlantGrowth)
pairwise.wilcox.test(PlantGrowth$weight,PlantGrowth$group,
p.adjust.method = "BH")
# Loading the dataset
myData = ToothGrowth
View(myData)
View(myData)
# Converting the variable dose from a numeric to a factor variable
myData$dose = as.factor(myData$dose)
# Basic boxplot
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
library(ggplot2)
ggplot(myData, aes(x = dose, y = len))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot() +
coord_flip()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() +
scale_x_discrete(limit = c("2", "0.5", "1"))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(1))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_stack(1))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(2))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(6))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.5))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(1))
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
install.packages("virdislite")
library(viridisLite)
df = mtcars
View(df)
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl))
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
p = ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = .5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "left",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
df$cyl = as.factor(df$cyl)
df$cyl = as.factor(df$cyl)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
library(ggplot2)
install.packages("ggthemes")
install.packages("ggthemes")
library(ggthemes)
library(viridisLite)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "left",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "center",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
# installing Packages
# install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
library(tidyverse)
# Importing the dataset
d <- read.csv("cropdata.csv")
library(tidyverse)
d = read.csv("cropdata.csv")
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-41👉 Two-way ANOVA in R (Part-3)")
d = read.csv("cropdata.csv")
summarization = d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd (y)/ sqrt(n()), .groups = "drop")
library(ggplot2)
ggplot(summarization, aes(irr , mean , group = fert)) +
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
facet_wrap(~ fert , nrow = 1) +
labs(x ="Irrigation", y = "Mean Yield",
title = "Interaction of Fertilizer vs Irrigation") +
theme_classic(base_size = 12)
m = aov(y ~ fert + irr + fert*irr, data = d)
summary(m)
m = aov(y ~ fert + irr + fert*irr, data = d)
summary(m)
par(mfrow=c(2,2))
plot(m)
# Assumptions visual checks
# par mane partition
#par(mfrow=c(2,2))
plot(m)
Assumptions visual checks
res = residuals(m)
shapiro.test(res)
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
options(contrasts = c("contr.sum","contr.poly"))
theme_set(theme_classic(base_size = 12))
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
cat("\nCell counts (balance check):\n")
print(with(d, table(fert, irr)))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
## ── 4) Model diagnostics & assumptions ----
# Visual checks
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
install.packages(c(
"tidyverse","car","emmeans","effectsize","performance",
"broom","broom.helpers","kableExtra","multcomp","multcompView","patchwork"
))
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
install.packages("broom.helpers")
library(broom.helpers)
install.packages("patchwork")
library(patchwork)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
library(patchwork)
library(ggplot2)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means ± 95% CI by Fertilizer × Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
