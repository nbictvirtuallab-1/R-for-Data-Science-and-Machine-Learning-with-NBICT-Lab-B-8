# Changing outlier color, shape, and size
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("2"))
# Changing box plot line colors by groups
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
# Changing the item order
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() +
scale_x_discrete(limit = c("2", "0.5", "1"))
dataset = ToothGrowth
View(dataset)
# Importing the dataset
tooth_data = ToothGrowth
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
# Importing the dataset
tooth_data = ToothGrowth
# Creating a function for summarizing the data
# based on the grouping variables
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
# Importing the dataset
tooth_data = ToothGrowth
View(tooth_data)
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
View(data_summary)
View(tooth_data)
View(d_summary)
sum(a+b)
sum(a,b)
a = 5
b = 8
sum(a+b)
summarise(a + b)
summarise(c)
c = sum(a+b)
summarise(c)
summarise(a,b)
summarise(4,7,9,8)
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(data_sum)
}
# Importing the dataset
tooth_data = ToothGrowth
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(all_summary)
}
View(data_summary)
View(tooth_data)
View(data_summary)
View(tooth_data)
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
View(data_summary)
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
tooth_data = ToothGrowth
# Creating a function for summarizing the data
# based on the grouping variables
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(all_summary)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
setwd("~/")
PlantGrowth = PlantGrowth
View(PlantGrowth)
library(dplyr)
stats = PlantGrowth %>%
group_by(group) %>%
summarise(
mean = mean(weight),
sd = sd(weight),
se = sd(weight)/ sqrt(n())
)
print(stats)
boxplot(weight ~ group,
data = PlantGrowth,
main = "PlantGrowth data",
ylab = "Dried weight of plants",
col = "lightgray"
)
library(ggpubr)
ggline(PlantGrowth,
x= "group",
y = "weight",
add = c("mean_se" , "jitter")
)
anova = aov(weight ~ group, data = PlantGrowth)
print(anova)
summary(anova)
shapiro.test(aov_res)
plot(anova,2)
aov_res = residuals(object = anova)
shapiro.test(aov_res)
kruskal.test(weight~group , data = PlantGrowth)
pairwise.wilcox.test(PlantGrowth$weight,PlantGrowth$group,
p.adjust.method = "BH")
# Loading the dataset
myData = ToothGrowth
View(myData)
View(myData)
# Converting the variable dose from a numeric to a factor variable
myData$dose = as.factor(myData$dose)
# Basic boxplot
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
library(ggplot2)
ggplot(myData, aes(x = dose, y = len))
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot() +
coord_flip()
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(notch = T)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
ggplot(myData, aes(x = dose, y = len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("2"))
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, color = dose)) +
geom_boxplot() +
scale_x_discrete(limit = c("2", "0.5", "1"))
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot()
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(1))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_stack(1))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(2))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(6))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(0.5))
# Changing the position
ggplot(myData, aes(x = dose, y = len, fill = supp)) +
geom_boxplot(position = position_dodge(1))
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
install.packages("virdislite")
library(viridisLite)
df = mtcars
View(df)
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl))
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
p = ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = .5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "left",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
df$cyl = as.factor(df$cyl)
df$cyl = as.factor(df$cyl)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_minimal(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5,
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
library(ggplot2)
install.packages("ggthemes")
install.packages("ggthemes")
library(ggthemes)
library(viridisLite)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "left",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "center",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-48 👉 Multiple Linear Regression in R (Part-1)")
dataset <- read.csv("50_Startup.csv")
dataset <- read.csv("50_Startups.csv")
View(dataset)
dataset$State <- factor(dataset$State)
dataset$State <- as.factor(dataset$State)
dataset$State <- factor(dataset$State)
dataset$State <- factor(dataset$State,
levels = c("New York" , "California" , "Florida"),
labels = c(1 , 2 , 3))
View(dataset)
View(dataset)
View(dataset)
View(dataset)
library(caTools)
split <- sample.split(dataset$Profit , SplitRatio = 0.8)
training_set <- subset(dataset, split = TRUE)
training_set <- subset(dataset, split == TRUE)
training_set <- subset(dataset, split == FALSE)
test_set <- subset(dataset, split == FALSE)
View(test_set)
View(training_set)
set.seed(123)
split <- sample.split(dataset$Profit , SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(test_set)
View(training_set)
# Fitting the multiple linear regression model to the training set
# independent variable gulor poriborte shudhu . O dea jete pare
regressor <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
regressor
summary(regressor)
