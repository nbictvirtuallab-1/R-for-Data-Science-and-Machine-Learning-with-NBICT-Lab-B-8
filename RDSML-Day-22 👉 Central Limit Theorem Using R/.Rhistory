ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg,shape = cyl color = cyl)) +
ggplot(dataset,aes(x = wt,y = mpg,shape = cyl, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg,shape = cyl, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg,size = cyl,shape = cyl, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg,size = cyl, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()
library(ggplot2)
dataset = mtcars
#generating a basic scatter plot
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 1, shape = 18) +
geom_smooth()
#removing the confidence interval
ggplot(dataset,aes(x = wt,y = mpg)) +
geom_point()+
geom_smooth( method = lm,linetype="dashed", color= "red", fill = "blue")
#changing the point shapes by using the levels of cylinder
dataset$cyl = as.factor(dataset$cyl)
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()/
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()/
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geompoint()
ggplot(dataset,aes(x = wt,y = mpg, color = cyl)) +
geom_point()
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset = data.frame(dose = c("D0.5","D1", "D2"),
len = c(4.2, 10, 29.5))
View(dataset)
geom_bar(stat = "identity")
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
library(ggplot2)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.5)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",color = "red" width = 0.5)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",color = "red", width = 0.5)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",color = "red",fill = "white" width = 0.5)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",color = "red",fill = "white", width = 0.5)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",color = "blue",fill = "white", width = 0.5)
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
theme_minimal()
dataset = data.frame(dose = c("D0.5","D1", "D2"),
len = c(4.2, 10, 29.5))
#basic barplot
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity")
#horizontal bar plot
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity") +
coord_flip()
#changing the width of bar
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity", width = 0.5)
#changing color
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",color = "blue",fill = "white", width = 0.5)
#Minimal theme with blue fill color
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len)) +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5) +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5, size = 3.5) +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5, size = 2) +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5, size = 3) +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5, size = 3, color = "#999999") +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5, size = 3, color = "#9F9F9F") +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = - 0.5, size = 3, color = "white") +
theme_minimal()
ggplot( data = dataset, aes(x = dose, y = len)) +
geom_bar(stat = "identity",fill = "steelblue") +
geom_text(aes (label = len), vjust = 1.6, size = 3, color = "white") +
theme_minimal()
mycardata = mtcars
View(mycardata)
View(mycardata)
#barplot of counts
#to make a barplot of counts,we use mtcars dataset
ggplot(data = mycardata, aes(x = factor()cyl)) +
#barplot of counts
#to make a barplot of counts,we use mtcars dataset
ggplot(data = mycardata, aes(x = factor()cyl)) +
ggplot(data = mycardata, aes(x = factor()cyl)) +
ggplot(data = myCarData, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") +
theme_minimal()
ggplot(data = mycardata, aes(x = factor(cyl))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") +
theme_minimal()
View(mycardata)
library(ggplot2)
dataset = mtcars
#Converting cyl column from a numeric to a factor variable
dataset$cyl = as.factor(dataset$cyl)
#Adding regression lines based on multiple groups
ggplot(dataset, aes(x=wt, y=mpg, colour = cyl)) +
geom_point() +
geom_smooth(method=lm)
#Removing the confidence intervals
ggplot(dataset,aes(x=wt,y=mpg, colour = cyl)) +
geom_smooth(method = lm,se=FALSE)
#Extending the regression lines
ggplot(dataset,aes(x=wt,y=mpg,colour = cyl)) +
geom_point() +
geom_smooth(method = lm, se=FALSE, fullrange = TRUE)
#filling the color of confidence bands
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl))
#Changing point shapes manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
theme(legend.position = "top")
#Changing point colors manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
theme(legend.position = "top")
#Customizing scatter plots
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
#Customizing themes
plot = ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
plot + theme_classic()
plot + theme_minimal()
#install.packages("ggplot2")
library(ggplot2)
dataset = mtcars
View(dataset)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
#changing the point size and shape
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 1, shape = 18)
t
#adding the regression line
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 1, shape = 18) +
geom_smooth(method = lm)
ToothGrowth
tooth_data = ToothGrowth
View(tooth_data)
library(ggplot2)
ggplot(ToothGrowth)
# Importing the dataset
tooth_data = ToothGrowth
View(tooth_data)
View(tooth_data)
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
tooth_data = ToothGrowth
# Creating a function for summarizing the data
# based on the grouping variables
data_summary = function(data, varname, groupnames){
require(plyr)
summary_func = function(x, col){
c(mean = mean(x[[col]]), sd = sd(x[[col]]))
}
all_summary = ddply(data, groupnames, .fun = summary_func, varname)
data_sum = rename(all_summary, c("mean" = varname))
return(data_sum)
}
d_summary = data_summary(tooth_data, varname = "len", groupnames = c("supp", "dose"))
# Converting 'dose' to a factor variable
d_summary$dose = as.factor(d_summary$dose)
# Standard deviation of the mean as error bar with explanation
library(ggplot2)
View(tooth_data)
ggplot(d_summary, aes(x = dose, y = len)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 1, position = position_dodge(.9)) +
theme_minimal()
ggplot(d_summary, aes(x = dose, y = len, fill = supp)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = len - sd, ymax = len + sd), width = 0.2, position = position_dodge(.9)) +
theme_minimal()
mydata = ToothGrowth
mydata$dose = as.factor(mydata$dose)
class(mydata$dose)
library(ggplot2)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot()
#rotating the box plot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot() +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notched= T) +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notched= "T") +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= "T") +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T) +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T) +
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T) +
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red")
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 2)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8, outlier.size = 5)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8, outlier.size = 3)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
#Loading the dataset
mydata = ToothGrowth
#Converting the variable dose from a numeric to factor variable
#mydata$dose = as.factor(mydata$dose)
library(ggplot2)
#Basic boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot()
#rotating the box plot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot() +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T)
#Changing outlier color,shape and size
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
#Loading the dataset
mydata = ToothGrowth
#Converting the variable dose from a numeric to factor variable
mydata$dose = as.factor(mydata$dose)
library(ggplot2)
#Basic boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot()
#rotating the box plot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot() +
coord_flip()
#Notched boxplot
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(notch= T)
#Changing outlier color,shape and size
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3)
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete()
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c(0.5,2))
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("0.5","2"))
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("0.5","1"))
ggplot(mydata, aes(x = dose, y= len)) +
geom_boxplot(outlier.color = "red", outlier.shape = 8,
outlier.size = 3) +
scale_x_discrete(limits = c("0.5","2"))
ggplot(mydata, aes(x = dose, y= len, color= dose)) +
geom_boxplot()
ggplot(mydata, aes(x = dose, y= len, color= dose)) +
geom_boxplot() +
scale_x_discrete(limits= c(2,0.5,1))
ggplot(mydata, aes(x = dose, y= len, color= dose)) +
geom_boxplot() +
scale_x_discrete(limits= c("2","0.5","1"))
ggplot(mydata, aes(x = dose, y= len, color= dose)) +
geom_boxplot() +
scale_x_discrete(limits= c(2,.5,1))
ggplot(mydata, aes(x = dose, y= len, color= dose)) +
geom_boxplot() +
scale_x_discrete(limits= c("2", "0.5", "1"))
View(mydata)
ggplot(mydata, aes(x = dose, y= len, color= supp)) +
geom_boxplot()
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
geom_boxplot()
ggplot(mydata, aes(x = dose, y= len, fill= len)) +
geom_boxplot()
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
geom_boxplot()
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
geom_boxplot(position = position_dodge(1))
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
geom_boxplot(position = position_dodge(2))
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
geom_boxplot(position = position_dodge(4))
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
geom_boxplot(position = position_dodge(1))
View(mydata)
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
df = mtcars
View(df)
View(df)
df$cyl = as.factor(df$cyl)
df$cyl = as.factor(df$cyl)
ggplot(mydata, aes(x = dose, y= len, fill= supp)) +
class(df$cyl)
library(ggplot2)
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
install.packages("virdislite")
library(viridisLite)
df = mtcars
df$cyl = as.factor(df$cyl)
ggplot(df,aes(x = wt, y = mpg))
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders")
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
)
df = mtcars
df$cyl = as.factor(df$cyl)
#Styling plot
ggplot(df,aes(x = wt, y = mpg, color = cyl)) +
geom_point(size= 3)+
scale_color_viridis_d(name = "cylinders") +
labs(
title = "Fuel Efficiency by Car Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon"
) +
theme_classic(base_size = 14, base_family = "serif") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
View(mydata)
runif(10)
r <- runif(10000)
r
hist(r)
meanr <- mean(r)
sdr <- sd(r)
samples1 <- sample(r,4)
samples1 <- sample(r,4)
samples1
samples2 <- sample(r,4)
samples2
samples3 <- sample(r,4)
samples3
mean(samples1)
mean(samples2)
mean(samples3)
cl4 <- mean(sample(r,4))
cl4
cl4 <- c(cl4, mean(sample(r,4)))
for (i in 1:1000){
cl4 <- c(cl4, mean(sample(r,4)))
}
for (i in 1:1000){
cl4 <- c(cl4, mean(sample(r,4)))
}
hist(cl4)
cl10 <- mean(sample(r,10))
for (i in 1:1000){
cl10 <- c(cl10, mean(sample(r,10)))
}
hist(cl10)
hist(cl100)
cl100 <- mean(sample(r,100))
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
hist(cl100)
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-22 👉 Central Limit Theorem Using R")
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-22 👉 Central Limit Theorem Using R")
