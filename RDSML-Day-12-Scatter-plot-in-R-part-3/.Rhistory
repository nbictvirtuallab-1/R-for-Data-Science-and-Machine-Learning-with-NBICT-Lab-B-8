names[4,5]
names[4:5]
names[4:1]
names[3:4]
my.values = c(3,4,6,7,8,9,45)
names(my.values) = c("a","b","c","y","i","u","U")
my.values
c
my.values[u]
my.values[U]
my.values = c(3,4,6,7,8,9,45)
names(my.values) = c("a","b","c","y","i","u","U")
my.values
my.values[U]
my.values = c(3,4,6,7,8,9,45)
names(my.values) = c("a","b","c","y","i","r","U")
my.values
my.values[U]
my.values[u]
my.values = c(3,4,6,7,8,9,45)
names(my.values) = c("a","b","c","y","i","r","u")
my.values
my.values[u]
my.values = c(3,4,6,7,8,9,45)
names(my.values) = c("a","b","c","y","i","r","u")
my.values
my.values[u]
my.values[a]
my.values [a]
my.values = c(3,4,6)
names(my.values) = c("a","b","c")
my.values
my.values [a]
my.values = c(3,4,6)
names(my.values) = c("a","b","c")
my.values
my.values ["a"]
names = c("refayet", "vaiya","rodela.apu", "ammu", "pappa")
names
class(names)
names[3:4]
my.values = c(3,4,6)
names(my.values) = c("a","b","c")
my.values
my.values ["a"]
remove.packages("psych")
install.packages("psych")
library(psych)
data()
AirPassengers
data(AirPassengers)
data(AirPassengers)
AirPassengers
data
data
data()
BJsales.lead (BJsales)
data
BJsales.lead (BJsales)
CO2
EuStockMarkets
AirPassengers
remove.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
attach(nycflights13)
attach(nycflights13 :: airlines)
head(nycflights13)
head("nycflights13")
head(nycflights13 :: airlines)
library(psych)
data
data()
AirPassengers
BOD
attach(nycflights13::flights)
# Using the New York airport flight data
# install.packages("nycflights13")
library(nycflights13)
attach(nycflights13::flights)
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
distance
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
distance
summary(distance)
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
#install.packages("ggplot2")
library(ggplot2)
dataset = mtcars
#Generating a basic scatter plot
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
#changing the point size and shape
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 1, shape = 18)
#adding the regression line
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 1, shape = 18) +
#changing the point size and shape
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 2, shape = 2)
#adding the regression line
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 2, shape = 2) +
#changing the point size and shape
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size = 2, shape = 2)
aggregate(distance, by = list(carrier, month), FUN = sd, na.rm = TRUE)
data()
#Descriptive statistics using the psych package
install.packages("psych")
BOD
install.packages("nycflights13")
attach(nycflights13::flights)
head(nycflights13::flights)
head(nycflights13::flights)
summary(distance)
describe(distance)
describe(distance)
describe(dist)
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
summary(distance)
describe(distance)
describe(demo)
summary(distance)
describe(distance)
library(psych)
describe(distance)
install.packages("psych")
library(psych)
library(psych)
data()
AirPassengers
BOD
install.packages("nycflights13")
attach(nycflights13::flights)
head(nycflights13::flights)
summary(distance)
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
colnames(demo) = c('Arrival delay', 'Departure Delay', 'Distance Travelled')
describe(demo)
dep_delay
hist(dep_delay)
hist(distance)
hist(Arrival delay)
hist(arr_delay)
hist(dep_delay)
# install.packages("ggplot2")
library(ggplot2)
dataset = mtcars
# Generating a basic scatter plot
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
# Changing the point size and shape
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18)
# Adding the regression line
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
#Removing the confidence interval
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
#Loess method
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
#Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
#How to change straight line to dashed line
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dashed",
color = "darkred")
#Changing the confidence interval color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18, color = "red") +
geom_smooth(method = lm, linetype = "dashed",
color = "darkred" , fill = "blue")
#Scatter plots in multiple groups
#Converting the cyl column from a numeric to factor variable
dataset$cyl = as.factor(dataset$cyl)
#Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl)) +
geom_point()
#Changing point shapes and colors by the levels pf cyl
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point()
#Changing point shapes,colors and sizes
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl, size = cyl)) +
geom_point()
library(ggplot2)
dataset(mtcars)
dataset(mtcars)
dataset = mtcars
#converting cyl column from numeric to a factor variable
dataset$cyl = as.factor(dataset$cyl)
ggplot(dataset, aes( x = wt, y = mpg) ) +
geom_point()
ggplot(dataset, aes( x = wt, y = mpg) ) +
geom_point() +
geom_smooth(method = lm)
ggplot(dataset, aes( x = wt, y = mpg, colour = cyl) ) +
geom_point() +
geom_smooth(method = lm)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl) ) +
geom_point() +
geom_smooth(method = lm)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl) fullrange = TRUE)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl) fullrange = TRUE)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE)
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(16,3,17))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(4,3,17))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(8,3,17))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(8,3,20))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(8,3,15))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17))
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
theme(legend.position = "top")
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
theme(legend.position = "top")
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "miles per gallon according to the weight") +
theme(legend.position = "top")
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon according to the weight") +
theme(legend.position = "top")
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \n according to the weight") +
theme(legend.position = "top")
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight") +
theme(legend.position = "top")
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
plot = ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
plot + theme_classic()
plot + theme_minimal()
library(ggplot2)
dataset = mtcars
#converting cyl column from numeric to a factor variable
dataset$cyl = as.factor(dataset$cyl)
#adding regression lines based on multiple groups
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm)
#removing the confience interval
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
#extending the regression lines
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
#filling the color of confidence bands
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl))
#Changing point shapes manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
theme(legend.position = "top")
#Changing point colors manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
theme(legend.position = "top")
#Customizing scatter plots
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
#Customizing themes
plot = ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
plot + theme_classic()
plot + theme_minimal()
version
library(ggplot2)
dataset = mtcars
#converting cyl column from numeric to a factor variable
dataset$cyl = as.factor(dataset$cyl)
#adding regression lines based on multiple groups
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm)
#removing the confience interval
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
#extending the regression lines
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
#filling the color of confidence bands
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl))
#Changing point shapes manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
theme(legend.position = "top")
#Changing point colors manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
theme(legend.position = "top")
#Customizing scatter plots
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
#Customizing themes
plot = ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
plot + theme_classic()
plot + theme_minimal()
library(ggplot2)
dataset = mtcars
#converting cyl column from numeric to a factor variable
dataset$cyl = as.factor(dataset$cyl)
#adding regression lines based on multiple groups
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm)
#removing the confience interval
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
#extending the regression lines
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
#filling the color of confidence bands
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,aes(fill= cyl))
#Changing point shapes manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
theme(legend.position = "top")
#Changing point colors manually
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
theme(legend.position = "top")
#Customizing scatter plots
ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
#Customizing themes
plot = ggplot(dataset, aes( x = wt, y = mpg, color = cyl, shape = cyl) ) +
geom_point() +
geom_smooth(method = lm,se= FALSE, fullrange = TRUE) +
scale_shape_manual(values=c(3,16,17)) +
scale_color_manual(values = c("darkblue", "grey", "orange")) +
labs(title = "Miles per gallon \naccording to the weight",
x= "weight", y = "Miles/Gallon") +
theme(legend.position = "top")
plot + theme_classic()
plot + theme_minimal()
plot + theme_minimal(),
plot + theme_minimal()
x <- 1:100
x
x -> 1:100
x <- 1:100
print(x)
x
x
x[79]
print(x[79])
print(x[78]
print(x[78]
print(x[78])
lm
lm()
dataset
dataset
dataset
mtcars
mtcars
setwd("G:/Class Works/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B-8/RDSML-Day-12-Scatter-plot-in-R-part-3")
